{
	"name": "Transform_SalesOrderDetail",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "az_sqldb_dbhartia2001_adventureworks",
						"type": "LinkedServiceReference"
					},
					"name": "SalesOrderDetail"
				},
				{
					"linkedService": {
						"referenceName": "az_sqldb_dbhartia2001_adventureworks",
						"type": "LinkedServiceReference"
					},
					"name": "Product"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "az_adls_DhruvTest1982",
						"type": "LinkedServiceReference"
					},
					"name": "LoadProductSales"
				}
			],
			"transformations": [
				{
					"name": "SalesByProduct"
				},
				{
					"name": "ProductRank"
				},
				{
					"name": "FilterProductRank"
				},
				{
					"name": "BringProductName"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SalesOrderID as integer,",
				"          SalesOrderDetailID as integer,",
				"          OrderQty as short,",
				"          ProductID as integer,",
				"          UnitPrice as decimal(19,4),",
				"          UnitPriceDiscount as decimal(19,4),",
				"          LineTotal as decimal(38,6),",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'SalesLT',",
				"     tableName: 'SalesOrderDetail',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> SalesOrderDetail",
				"source(output(",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          Weight as decimal(8,2),",
				"          ProductCategoryID as integer,",
				"          ProductModelID as integer,",
				"          SellStartDate as timestamp,",
				"          SellEndDate as timestamp,",
				"          DiscontinuedDate as timestamp,",
				"          ThumbNailPhoto as binary,",
				"          ThumbnailPhotoFileName as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'SalesLT',",
				"     tableName: 'Product',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> Product",
				"SalesOrderDetail aggregate(groupBy(ProductID),",
				"     SalesByProduct = sum(LineTotal),",
				"          TotalProducts = count(SalesOrderID)) ~> SalesByProduct",
				"SalesByProduct rank(desc(SalesByProduct, true),",
				"     output(ProductRank as long)) ~> ProductRank",
				"ProductRank filter(lesserOrEqual(ProductRank, 10)) ~> FilterProductRank",
				"FilterProductRank, Product join(SalesByProduct@ProductID == Product@ProductID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> BringProductName",
				"BringProductName sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: '2025',",
				"     compressionCodec: 'snappy',",
				"     partitionFileNames:['productrank.snappy.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          ProductRank,",
				"          Name,",
				"          SalesByProduct,",
				"          TotalProducts",
				"     ),",
				"     partitionBy('hash', 1)) ~> LoadProductSales"
			]
		}
	}
}